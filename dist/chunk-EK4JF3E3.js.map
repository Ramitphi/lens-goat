{"version":3,"sources":["/Users/ramit/work/lens_goat/lens-plugin/typescript/packages/plugins/lens/dist/chunk-EK4JF3E3.js","../src/lens.service.ts"],"names":["LensService","getWalletAddressofGivenPost","parameters","link","postURL","regex","match","Error","postOwner","to","profileId","address","recommendation","username"],"mappings":"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","file":"/Users/ramit/work/lens_goat/lens-plugin/typescript/packages/plugins/lens/dist/chunk-EK4JF3E3.js","sourcesContent":[null,"import { Tool } from \"@goat-sdk/core\";\nimport { EVMWalletClient } from \"@goat-sdk/wallet-evm\";\n\nimport { z } from \"zod\";\nimport {\n    FormatUrlParameterSchema,\n    GetPostOwnerParameterSchema,\n    GetPostOwnerResponseSchema,\n    GetProfileIdParameterSchema,\n    GetProfileIdResponseSchema,\n    GetProfileRecommendationsSchema,\n    GetRecommendationParameterSchema,\n    TipParameters,\n} from \"./parameters\";\n\nimport { parseEther } from \"viem\";\n\nexport class LensService {\n    @Tool({\n        description: \"Get wallet address for creator of the given post\",\n    })\n    async getWalletAddressofGivenPost(parameters: GetPostOwnerParameterSchema) {\n        const link = parameters.postURL;\n        const regex = /https:\\/\\/hey\\.xyz\\/posts\\/(.*)/;\n        const match = link.match(regex);\n\n        if (!match) {\n            throw new Error(`Please submit a valid link. Submitted link: ${link}`);\n        }\n\n        let postOwner: z.infer<typeof GetPostOwnerResponseSchema>;\n        try {\n            const response = await fetch(\"https://api-v2.lens.dev/\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    query: `query Publication($request: PublicationRequest!) {\n                        publication(request: $request) {\n                          ... on Post {\n                            by {\n                              ownedBy {\n                                address\n                              }\n                            }\n                          }\n                        }\n                      }`,\n                    variables: {\n                        request: {\n                            forId: match[1],\n                        },\n                    },\n                }),\n            });\n\n            postOwner = (await response.json()) as z.infer<typeof GetPostOwnerResponseSchema>;\n        } catch (error) {\n            throw new Error(`Failed to get NFT collection statistics: ${error}`);\n        }\n\n        return postOwner;\n    }\n\n    @Tool({\n        description: \"Tip this creator with an amount of grass token\",\n    })\n    async tipTheCreator(walletClient: EVMWalletClient, parameters: TipParameters) {\n        try {\n            const to = await walletClient.resolveAddress(parameters.to);\n            const hash = await walletClient.sendTransaction({\n                to,\n                value: parseEther(parameters.amount),\n            });\n\n            return `https://block-explorer.testnet.lens.dev/tx/${hash.hash}`;\n        } catch (error) {\n            throw Error(`Failed to transfer: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the profileId of creator based on their address\",\n    })\n    async getProfileId(parameters: GetProfileIdParameterSchema) {\n        let profileId: z.infer<typeof GetProfileIdResponseSchema>;\n\n        try {\n            const response = await fetch(\"https://api-v2.lens.dev/\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    query: `query DefaultProfile($request: DefaultProfileRequest!) {\n                        defaultProfile(request: $request) {\n                          id\n                        }\n                      }`,\n                    variables: {\n                        request: {\n                            for: parameters.address,\n                        },\n                    },\n                }),\n            });\n            profileId = (await response.json()) as z.infer<typeof GetProfileIdResponseSchema>;\n        } catch (error) {\n            throw Error(`Failed to transfer: ${error}`);\n        }\n        return profileId;\n    }\n\n    @Tool({\n        description: \"Get similar creators for given profileId\",\n    })\n    async getRecommendations(parameters: GetRecommendationParameterSchema) {\n        let recommendation: z.infer<typeof GetProfileRecommendationsSchema>;\n\n        try {\n            const response = await fetch(\"https://api-v2.lens.dev/\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    query: `query ProfileRecommendations($request: ProfileRecommendationsRequest!) {\n                        profileRecommendations(request: $request) {\n                          items {\n                            id\n                            handle {\n                              fullHandle\n                            }\n                          }\n                        }\n                      }`,\n                    variables: {\n                        request: {\n                            for: parameters.profileId,\n                        },\n                    },\n                }),\n            });\n\n            recommendation = (await response.json()) as z.infer<typeof GetProfileRecommendationsSchema>;\n        } catch (error) {\n            throw Error(`Failed to transfer: ${error}`);\n        }\n        return recommendation;\n    }\n\n    @Tool({\n        description: \"Format the lens handle with url\",\n    })\n    async formatTheHandle(parameters: FormatUrlParameterSchema) {\n        try {\n            const baseUrl = \"https://hey.xyz/u/\";\n            const username = parameters.handle.split(\"/\")[1];\n            return `${baseUrl}${username}`;\n        } catch (error) {\n            throw Error(`Failed to transfer: ${error}`);\n        }\n    }\n}\n"]}