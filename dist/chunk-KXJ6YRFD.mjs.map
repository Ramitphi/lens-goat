{"version":3,"sources":["../src/lens.service.ts"],"sourcesContent":["import { Tool } from \"@goat-sdk/core\";\nimport { EVMWalletClient } from \"@goat-sdk/wallet-evm\";\n\nimport { z } from \"zod\";\nimport {\n    FormatUrlParameterSchema,\n    GetPostOwnerParameterSchema,\n    GetPostOwnerResponseSchema,\n    GetProfileIdParameterSchema,\n    GetProfileIdResponseSchema,\n    GetProfileRecommendationsSchema,\n    GetRecommendationParameterSchema,\n    TipParameters,\n} from \"./parameters\";\n\nimport { parseEther } from \"viem\";\n\nexport class LensService {\n    @Tool({\n        description: \"Get wallet address for creator of the given post\",\n    })\n    async getWalletAddressofGivenPost(parameters: GetPostOwnerParameterSchema) {\n        const link = parameters.postURL;\n        const regex = /https:\\/\\/hey\\.xyz\\/posts\\/(.*)/;\n        const match = link.match(regex);\n\n        if (!match) {\n            throw new Error(`Please submit a valid link. Submitted link: ${link}`);\n        }\n\n        let postOwner: z.infer<typeof GetPostOwnerResponseSchema>;\n        try {\n            const response = await fetch(\"https://api-v2.lens.dev/\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    query: `query Publication($request: PublicationRequest!) {\n                        publication(request: $request) {\n                          ... on Post {\n                            by {\n                              ownedBy {\n                                address\n                              }\n                            }\n                          }\n                        }\n                      }`,\n                    variables: {\n                        request: {\n                            forId: match[1],\n                        },\n                    },\n                }),\n            });\n\n            postOwner = (await response.json()) as z.infer<typeof GetPostOwnerResponseSchema>;\n        } catch (error) {\n            throw new Error(`Failed to get NFT collection statistics: ${error}`);\n        }\n\n        return postOwner;\n    }\n\n    @Tool({\n        description: \"Tip this creator with an amount of grass token\",\n    })\n    async tipTheCreator(walletClient: EVMWalletClient, parameters: TipParameters) {\n        try {\n            const to = await walletClient.resolveAddress(parameters.to);\n            const hash = await walletClient.sendTransaction({\n                to,\n                value: parseEther(parameters.amount),\n            });\n\n            return `https://block-explorer.testnet.lens.dev/tx/${hash.hash}`;\n        } catch (error) {\n            throw Error(`Failed to transfer: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the profileId of creator based on their address\",\n    })\n    async getProfileId(parameters: GetProfileIdParameterSchema) {\n        let profileId: z.infer<typeof GetProfileIdResponseSchema>;\n\n        try {\n            const response = await fetch(\"https://api-v2.lens.dev/\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    query: `query DefaultProfile($request: DefaultProfileRequest!) {\n                        defaultProfile(request: $request) {\n                          id\n                        }\n                      }`,\n                    variables: {\n                        request: {\n                            for: parameters.address,\n                        },\n                    },\n                }),\n            });\n            profileId = (await response.json()) as z.infer<typeof GetProfileIdResponseSchema>;\n        } catch (error) {\n            throw Error(`Failed to transfer: ${error}`);\n        }\n        return profileId;\n    }\n\n    @Tool({\n        description: \"Get similar creators for given profileId\",\n    })\n    async getRecommendations(parameters: GetRecommendationParameterSchema) {\n        let recommendation: z.infer<typeof GetProfileRecommendationsSchema>;\n\n        try {\n            const response = await fetch(\"https://api-v2.lens.dev/\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    query: `query ProfileRecommendations($request: ProfileRecommendationsRequest!) {\n                        profileRecommendations(request: $request) {\n                          items {\n                            id\n                            handle {\n                              fullHandle\n                            }\n                          }\n                        }\n                      }`,\n                    variables: {\n                        request: {\n                            for: parameters.profileId,\n                        },\n                    },\n                }),\n            });\n\n            recommendation = (await response.json()) as z.infer<typeof GetProfileRecommendationsSchema>;\n        } catch (error) {\n            throw Error(`Failed to transfer: ${error}`);\n        }\n        return recommendation;\n    }\n\n    @Tool({\n        description: \"Format the lens handle with url\",\n    })\n    async formatTheHandle(parameters: FormatUrlParameterSchema) {\n        try {\n            const baseUrl = \"https://hey.xyz/u/\";\n            const username = parameters.handle.split(\"/\")[1];\n            return `${baseUrl}${username}`;\n        } catch (error) {\n            throw Error(`Failed to transfer: ${error}`);\n        }\n    }\n}\n"],"mappings":";;;;;;;;;;;;AAAA,SAASA,YAAY;AACrB,SAASC,uBAAuB;AAchC,SAASC,kBAAkB;;;;;;;;;;;;AAEpB,IAAMC,cAAN,MAAMA;SAAAA;;;EACT,MAGMC,4BAA4BC,YAAyC;AACvE,UAAMC,OAAOD,WAAWE;AACxB,UAAMC,QAAQ;AACd,UAAMC,QAAQH,KAAKG,MAAMD,KAAAA;AAEzB,QAAI,CAACC,OAAO;AACR,YAAM,IAAIC,MAAM,+CAA+CJ,IAAAA,EAAM;IACzE;AAEA,QAAIK;AACJ,QAAI;AACA,YAAMC,WAAW,MAAMC,MAAM,4BAA4B;QACrDC,QAAQ;QACRC,SAAS;UACL,gBAAgB;QACpB;QACAC,MAAMC,KAAKC,UAAU;UACjBC,OAAO;;;;;;;;;;;UAWPC,WAAW;YACPC,SAAS;cACLC,OAAOb,MAAM,CAAA;YACjB;UACJ;QACJ,CAAA;MACJ,CAAA;AAEAE,kBAAa,MAAMC,SAASW,KAAI;IACpC,SAASC,OAAO;AACZ,YAAM,IAAId,MAAM,4CAA4Cc,KAAAA,EAAO;IACvE;AAEA,WAAOb;EACX;EAEA,MAGMc,cAAcC,cAA+BrB,YAA2B;AAC1E,QAAI;AACA,YAAMsB,KAAK,MAAMD,aAAaE,eAAevB,WAAWsB,EAAE;AAC1D,YAAME,OAAO,MAAMH,aAAaI,gBAAgB;QAC5CH;QACAI,OAAOC,WAAW3B,WAAW4B,MAAM;MACvC,CAAA;AAEA,aAAO,8CAA8CJ,KAAKA,IAAI;IAClE,SAASL,OAAO;AACZ,YAAMd,MAAM,uBAAuBc,KAAAA,EAAO;IAC9C;EACJ;EAEA,MAGMU,aAAa7B,YAAyC;AACxD,QAAI8B;AAEJ,QAAI;AACA,YAAMvB,WAAW,MAAMC,MAAM,4BAA4B;QACrDC,QAAQ;QACRC,SAAS;UACL,gBAAgB;QACpB;QACAC,MAAMC,KAAKC,UAAU;UACjBC,OAAO;;;;;UAKPC,WAAW;YACPC,SAAS;cACLe,KAAK/B,WAAWgC;YACpB;UACJ;QACJ,CAAA;MACJ,CAAA;AACAF,kBAAa,MAAMvB,SAASW,KAAI;IACpC,SAASC,OAAO;AACZ,YAAMd,MAAM,uBAAuBc,KAAAA,EAAO;IAC9C;AACA,WAAOW;EACX;EAEA,MAGMG,mBAAmBjC,YAA8C;AACnE,QAAIkC;AAEJ,QAAI;AACA,YAAM3B,WAAW,MAAMC,MAAM,4BAA4B;QACrDC,QAAQ;QACRC,SAAS;UACL,gBAAgB;QACpB;QACAC,MAAMC,KAAKC,UAAU;UACjBC,OAAO;;;;;;;;;;UAUPC,WAAW;YACPC,SAAS;cACLe,KAAK/B,WAAW8B;YACpB;UACJ;QACJ,CAAA;MACJ,CAAA;AAEAI,uBAAkB,MAAM3B,SAASW,KAAI;IACzC,SAASC,OAAO;AACZ,YAAMd,MAAM,uBAAuBc,KAAAA,EAAO;IAC9C;AACA,WAAOe;EACX;EAEA,MAGMC,gBAAgBnC,YAAsC;AACxD,QAAI;AACA,YAAMoC,UAAU;AAChB,YAAMC,WAAWrC,WAAWsC,OAAOC,MAAM,GAAA,EAAK,CAAA;AAC9C,aAAO,GAAGH,OAAAA,GAAUC,QAAAA;IACxB,SAASlB,OAAO;AACZ,YAAMd,MAAM,uBAAuBc,KAAAA,EAAO;IAC9C;EACJ;AACJ;;;IAjJQqB,aAAa;;;;;;;;;;IA+CbA,aAAa;;;;;;;;;;;IAiBbA,aAAa;;;;;;;;;;IAgCbA,aAAa;;;;;;;;;;IAsCbA,aAAa;;;;;;;;","names":["Tool","EVMWalletClient","parseEther","LensService","getWalletAddressofGivenPost","parameters","link","postURL","regex","match","Error","postOwner","response","fetch","method","headers","body","JSON","stringify","query","variables","request","forId","json","error","tipTheCreator","walletClient","to","resolveAddress","hash","sendTransaction","value","parseEther","amount","getProfileId","profileId","for","address","getRecommendations","recommendation","formatTheHandle","baseUrl","username","handle","split","description"]}